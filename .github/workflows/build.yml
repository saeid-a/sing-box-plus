name: Build and release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  set_version:
    name: Gather release version info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.outputs.outputs.version }}
      tag: ${{ steps.outputs.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.23
      - name: Extracting version number from changelog.md
        if: github.event_name == 'workflow_dispatch'
        run: |
          LATEST_VERSION=$(grep -E -m 1 '^(###|####) ' docs/changelog.md | sed 's/^[#]* //')
          echo "version=$LATEST_VERSION" >> "$GITHUB_ENV"
      - name: Get version number from the last commit
        if: github.event_name != 'workflow_dispatch'
        run: |
          go run -v ./cmd/internal/read_tag --nightly
      - name: Set outputs
        id: outputs
        run: |
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "tag=v$version" >> "$GITHUB_OUTPUT"
  create_release:
    name: Create draft release
    needs: set_version
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ needs.set_version.outputs.tag }}
        VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup environment
        shell: bash
        run: |
          echo "VERSION=${{ env.VERSION }}"
          RELEASE_NOTES=$(awk "/^### $VERSION$|^#### $VERSION$/{flag=1;next}/^(###|####) /{flag=0}flag" docs/changelog.md)
          echo "$RELEASE_NOTES" > changelog.md
          echo -e "Setting release name to version $VERSION"
          echo -e "Release notes: ${RELEASE_NOTES}"
      - name: Create draft release # This also creates a git tag
        run: |
          gh release create ${{ env.RELEASE_TAG }} --title ${{ env.VERSION }} --notes-file changelog.md --latest --draft
      
  cross_compile:
    needs: 
      - set_version
      - create_release
    strategy:
      matrix:
        include:
          # windows
          - name: windows-amd64
            goos: windows
            goarch: amd64
            goamd64: v1
          - name: windows-amd64v3
            goos: windows
            goarch: amd64
            goamd64: v3
          - name: windows-arm64
            goos: windows
            goarch: arm64
          - name: windows-386
            goos: windows
            goarch: 386
          # linux
          - name: linux-amd64
            goos: linux
            goarch: amd64
            goamd64: v1
          - name: linux-amd64v3
            goos: linux
            goarch: amd64
            goamd64: v3
          - name: linux-arm64
            goos: linux
            goarch: arm64
          - name: linux-386
            goos: linux
            goarch: 386
          - name: linux-armv5
            goos: linux
            goarch: arm
            goarm: 5
          - name: linux-armv6
            goos: linux
            goarch: arm
            goarm: 6
          - name: linux-armv7
            goos: linux
            goarch: arm
            goarm: 7
          - name: linux_s390x
            goos: linux
            goarch: s390x
          - name: linux_riscv64
            goos: linux
            goarch: riscv64
          - name: linux_mips64le
            goos: linux
            goarch: mips64le
          # darwin
          - name: darwin-amd64
            goos: darwin
            goarch: amd64
            goamd64: v1
          - name: darwin-amd64v3
            goos: darwin
            goarch: amd64
            goamd64: v3
          - name: darwin-arm64
            goos: darwin
            goarch: arm64
          # freebsd
          - name: freebsd-amd64
            goos: freebsd
            goarch: amd64
            goamd64: v1
          - name: freebsd-amd64v3
            goos: freebsd
            goarch: amd64
            goamd64: v3
          - name: freebsd-386
            goos: freebsd
            goarch: 386
          - name: freebsd-arm64
            goos: freebsd
            goarch: arm64
      fail-fast: true
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOAMD64: ${{ matrix.goamd64 }}
      CGO_ENABLED: 0
      TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_reality_server,with_acme,with_clash_api
      RELEASE_TAG: ${{ needs.set_version.outputs.tag }}
      VERSION: ${{ needs.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.23
      - name: Create tag
        run: |
          git tag ${{ env.RELEASE_TAG }} -f
      - name: Build
        id: build
        run: make
      - name: Compress binaries
        run: |
          7z a sing-box-${{ env.VERSION }}-${{ matrix.name }}.zip sing-box*
      - name: Add binary to release
        run: |
          gh release upload ${{ env.RELEASE_TAG }} sing-box-${{ env.VERSION }}-${{ matrix.name }}.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
